#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#define MAX_ARGS 100

// Function to generate a random DNA sequence
void generate_sequence(char *seq, long length) {
    const char bases[] = "ACGT";
    for (long i = 0; i < length; i++) {
        seq[i] = bases[rand() % 4];
    }
    seq[length] = '\0';
}

// Function to generate a random quality string
void generate_quality(char *qual, long length) {
    for (long i = 0; i < length; i++) {
        qual[i] = 33 + (rand() % 41); // ASCII 33 to 73
    }
    qual[length] = '\0';
}

// Function to parse size string (e.g., "1kb", "2Mb")
long parse_size(const char *size_str) {
    long size = atol(size_str);
    char suffix = toupper(size_str[strlen(size_str) - 1]);
    
    switch (suffix) {
        case 'K': size *= 1000; break;
        case 'M': size *= 1000000; break;
        case 'G': size *= 1000000000; break;
    }
    
    return size;
}

int main(int argc, char *argv[]) {
    if (argc < 3) {
        fprintf(stderr, "Usage: %s [--fasta|--fastq] ARGS\n", argv[0]);
        return 1;
    }

    int is_fastq = 0;
    if (strcmp(argv[1], "--fastq") == 0) {
        is_fastq = 1;
    } else if (strcmp(argv[1], "--fasta") != 0) {
        fprintf(stderr, "Invalid format option. Use --fasta or --fastq.\n");
        return 1;
    }

    srand(time(NULL));

    for (int i = 2; i < argc; i++) {
        char *arg = argv[i];
        char *count_str = strtok(arg, "*");
        char *size_str = strtok(NULL, "*");

        if (!count_str || !size_str) {
            fprintf(stderr, "Invalid argument format: %s\n", arg);
            continue;
        }

        int count = atoi(count_str);
        long size = parse_size(size_str);

        char *sequence = malloc(size + 1);
        char *quality = NULL;
        if (is_fastq) {
            quality = malloc(size + 1);
        }

        for (int j = 0; j < count; j++) {
            generate_sequence(sequence, size);
            
            if (is_fastq) {
                generate_quality(quality, size);
                printf("@Simulated_read_%d\n%s\n+\n%s\n", j+1, sequence, quality);
            } else {
                printf(">Simulated_read_%d\n%s\n", j+1, sequence);
            }
        }

        free(sequence);
        if (quality) free(quality);
    }

    return 0;
}